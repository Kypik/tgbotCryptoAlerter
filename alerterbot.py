from telebot.async_telebot import AsyncTeleBot
from telebot import types
import aiosqlite
import sqlite3
from excRates import coinRate, rateState  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = AsyncTeleBot('6560618446:AAGPuABQdK-sDLc6eXt1xJ1xDtbiyoxP2-M')

# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–≤—É—Ö –∫–æ—Ä—É—Ç–∏–Ω
async def main():
    await asyncio.gather(sendReminder(), bot.polling())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
def newButton(txt, cb_data):
    return types.InlineKeyboardButton(txt, callback_data=cb_data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
async def reminders(message):
    global tg_id, count_completed_reminders, mes_text, mes_text1
    markup = types.InlineKeyboardMarkup()
    markup.add(newButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', 'new_reminder_from_remiders'))
    in_process = []
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect('alerterbot.sql') as db:
        async with db.execute("SELECT * FROM users WHERE tg_id=?", (tg_id,)) as cursor:
            count_completed_reminders = 0
            in_process_data = []
            for user in await cursor.fetchall():
                if user[-1] == 0:
                    count_completed_reminders += 1
                else:
                    in_process_data.append(user)

    if in_process_data == []:
        in_process_data = "–Ω–µ—Ç"
    
    if in_process_data != "–Ω–µ—Ç":
        in_process = []
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for el in in_process_data:
            
            el = list(el[3:-1])
            if el[0] == 0: el[0] = "<b>üíéBTC</b>"
            elif el[0] == 1: el[0] = "<b>üíéETH</b>"
            elif el[0] == 2: el[0] = "<b>üíéSOL</b>"

            if el[1] == 'up': el[1] = "üìà"
            else: el[1] = "üìâ"

            el[2] = f"<b>{el[2]}%</b>" 
            el[3] = f"<b>üìä {el[3]}$</b>"
            el = ' '.join(el)
            in_process.append(f'{el}\n')
            
        mes_text = f"–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n{''.join(str(el) for el in in_process)}\n–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {count_completed_reminders}"
    else:
        mes_text = f"–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: {in_process_data}\n–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {count_completed_reminders}"
        
    await bot.send_message(message.chat.id, mes_text, reply_markup=markup, parse_mode="HTML")
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
async def newReminder(message):
    markup = types.InlineKeyboardMarkup()
    button1 = newButton('Bitcoin (BTC)', 'BTC')
    button2 = newButton('Ethereum (ETH)', 'ETH')
    button3 = newButton('Solana (SOL)', 'SOL')
    markup.row(button1, button2, button3)
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", reply_markup=markup)
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "waiting_for_choice"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
async def sendReminder():
    global rate0, rate1, rate2
    while True:
        async with aiosqlite.connect('alerterbot.sql') as db:
            async with db.execute("SELECT * FROM users WHERE in_process = 1") as cursor:
                tasks = []
                rate0 = await coinRate(0)
                rate1 = await coinRate(1)
                rate2 = await coinRate(2)

                async for user in cursor:
                    if user[3] == 0:
                        tasks.append(rateState(bot, user[3], user[5], user[4], user[6], user[2], rate0))
                    if user[3] == 1:
                        tasks.append(rateState(bot, user[3], user[5], user[4], user[6], user[2], rate1))
                    if user[3] == 2:
                        tasks.append(rateState(bot, user[3], user[5], user[4], user[6], user[2], rate2))
                await asyncio.gather(*tasks)
                await asyncio.sleep(300)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
async def rateNow(call, chat_id):
        global coin, choice, rate0, rate1, rate2
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.delete_message(chat_id, call.message.message_id)
        if call.data == 'BTC':
            coin = 0
            await bot.send_message(chat_id, f"–ö—É—Ä—Å BTC/USD –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${rate0}")
        elif call.data == 'ETH':
            coin = 1
            await bot.send_message(chat_id, f"–ö—É—Ä—Å ETH/USD –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${rate1}")
        elif call.data == 'SOL':
            coin = 2
            await bot.send_message(chat_id, f"–ö—É—Ä—Å SOL/USD –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${rate2}")
        

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
async def up_or_down(message):
    markup = types.InlineKeyboardMarkup()
    button1 = newButton('–ö—É—Ä—Å –≤—ã—Ä–∞—Å—Ç–µ—Ç', 'up')
    button2 = newButton('–ö—É—Ä—Å —É–ø–∞–¥–µ—Ç', 'down')
    markup.row(button1, button2)
    await bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤–∞–º –Ω—É–∂–Ω–æ?", reply_markup=markup)                  

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'menu'])
async def start(message):
    global tg_id, name
    tg_id = message.from_user.id
    name = message.from_user.first_name
    async with aiosqlite.connect('alerterbot.sql') as db:
        async with db.execute("SELECT tg_id FROM users WHERE tg_id=?", (tg_id,)) as cursor:
            if not await cursor.fetchone():
                await bot.send_message(message.chat.id, "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ —Ä—ã–Ω–∫–µ!")
                await newReminder(message)
            else:
                await reminders(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "waiting_for_percent")
async def percent(message):
    global pers, coin, choice, tg_id, name, mes_text1
    try:
        pers = float(message.text)
        if pers >= 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(newButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', 'new_reminder_from_persent'))
            markup.add(newButton('–ú–æ–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', 'reminders'))
            mes_text1 = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ {pers}%"
            await bot.send_message(message.chat.id, mes_text1, reply_markup=markup)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "None"
            user_states[message.chat.id] = None
            
            async with aiosqlite.connect('alerterbot.sql') as db:
                async with db.execute("INSERT INTO users (tg_id, name, chat_id, coin, choice, persent, start_rate, in_process) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", (tg_id, name, message.chat.id, coin, choice, pers, await coinRate(coin), 1)) as cursor:
                    await db.commit()
        else:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            await bot.register_next_step_handler(message, percent)
    except ValueError:
        await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        await bot.register_next_step_handler(message, percent)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é percent —Å–Ω–æ–≤–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@bot.callback_query_handler(func=lambda call: True)
async def handle_callback(call):
    global count_completed_reminders, mes_text, mes_text1, choice
    chat_id = call.message.chat.id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if call.data == 'new_reminder_from_remiders': # –í—ã–∑–æ–≤ –∏–∑ reminders
        await newReminder(call.message)
        await bot.edit_message_text(mes_text,  chat_id, call.message.message_id, parse_mode="HTML")
    elif call.data == 'new_reminder_from_persent': # –í—ã–∑–æ–≤ –∏–∑ persent
        await newReminder(call.message)
        await bot.edit_message_text(mes_text1,  chat_id, call.message.message_id, parse_mode="HTML")
    elif call.data == 'reminders': # –í—ã–∑–æ–≤ –∏–∑ percent
        await reminders(call.message)
        await bot.edit_message_text(mes_text1,  chat_id, call.message.message_id, parse_mode="HTML")
    elif call.data in ['BTC', 'ETH', 'SOL']: # –í—ã–∑–æ–≤ –∏–∑ newReminder
        await rateNow(call, chat_id)
        await up_or_down(call.message)
    elif call.data in ['up', 'down']: # –í—ã–∑–æ–≤ –∏–∑ up_or_down
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "waiting_for_percent"
        user_states[chat_id] = "waiting_for_percent"
        await bot.delete_message(chat_id, call.message.message_id)
        if call.data == 'up':
            choice = 'up'
        else: 
            choice = 'down'
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ù–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 0.1)")
    else:
        await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
db = sqlite3.connect('alerterbot.sql')
cursor = db.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users(tg_id TEXT, name TEXT, chat_id INT, coin INT, choice TEXT, persent REAL, start_rate REAL, in_process INT)")
db.commit()
cursor.close()
db.close()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
asyncio.run(main())